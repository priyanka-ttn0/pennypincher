AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AccountName:
    Description: '(Optional)- Takes account name as input'
    Type: 'String'
  CodeBucketName:
    Description: 'A S3 bucket  which contain zip file'
    Type: "String"
    Default: 'penny-pincher-s3-bucket'
  ReportingPlatform:
    Description: 'Takes comma seperated reporting values, allowed values are S3, Slack, Email'
    Type: 'String'
    Default: 'Email'
  SlackChannelName:
    Description: 'Takes slack channel name as input. Keep the defaults in case slack notifications are not required'
    Type: 'String'
    Default: '-'
  WebhookUrl:
    Description: 'Takes slack webhook url as input . Keep the defaults in case slack notifications are not required'
    Type: 'String'
    Default: '-'
  SESFromEmailAddress:
    Type: 'String'
    Description: 'Takes the email id from which the mail containing cost report will be sent. Keep the defaults in case email notifications are not required'
  SESToEmailAddress:
    Description: 'Takes email id to which the mail containing cost report will be sent. Keep the defaults in case email notifications are not required'
    Type: 'String'
  SESRegion:
    Description: 'Takes the AWS region abbreviation (e.g. ap-south-1 for Mumbai) in which SES is configured'
    Type: 'String'
    Default: 'us-east-1'
  ReportBucket:
    Description: '(Optional)- A S3 bucket to store reports'
    Type: "String"
  ImageUri:
    Description: "Docker Image URI"
    Type: "String"

Conditions:
  CreateReportBucket: !Equals
    - !Ref ReportBucket
    - ""
  VerifyToEmail: !Equals
    - !Ref SESToEmailAddress
    - ""
  IfToEmailNotNull: !Not
    - Condition: VerifyToEmail
  VerifyFromEmail: !Equals
    - !Ref SESFromEmailAddress
    - ""
  IfFromEmailNotNull: !Not
    - Condition: VerifyFromEmail

Resources:
  ManagedReportBucket:
    Type: AWS::S3::Bucket
    Condition: CreateReportBucket
    Properties:
      BucketName:  !Join
      - "-"
      - - "pennypincher-managedbucket"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      
  ServiceRoleForLambda:
    Type: 'AWS::IAM::Role'
    Description: 'IAM role for Penny Pincher'
    Properties:
      RoleName: !Join
      - "-"
      - - "Penny-Pincher-Docker-Lambda"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Policies:
        - PolicyName: 'Penny-Pincher-Lambda-Inline-Policy'
          PolicyDocument: !Sub
            - '{
                   "Version": "2012-10-17",
                   "Statement": [
                       {
                           "Sid": "VisualEditor0",
                           "Effect": "Allow",
                           "Action": [
                               "ec2:DescribeImages",
                               "ec2:DescribeInstances",
                               "ec2:DescribeRegions",
                               "ec2:DescribeVolumes",
                               "ec2:DescribeAddresses",
                               "pricing:GetProducts",
                               "elasticache:DescribeCacheClusters",
                               "es:ListDomainNames",
                               "es:DescribeElasticsearchDomain",
                               "elasticloadbalancing:DescribeLoadBalancers",
                               "rds:DescribeDBInstances",
                               "redshift:DescribeClusters",
                               "ses:SendEmail",
                               "logs:CreateLogStream",
                               "logs:CreateLogGroup",
                               "logs:PutLogEvents",
                               "cloudwatch:GetMetricStatistics"
                           ],
                           "Resource": "*"
                       },
                       {
                                  "Sid": "VisualEditor1",
                                  "Effect": "Allow",
                                  "Action": "*",
                                  "Resource":"arn:aws:s3:::${ReportBucket}/*"
                      }
                   ]
               }'
            - { ReportBucket: !If [ CreateReportBucket, !Ref ManagedReportBucket, !Ref ReportBucket ] }

  ToEmailVerfification:
    Type: AWS::SES::EmailIdentity
    Condition: IfToEmailNotNull
    Properties: 
      EmailIdentity: !Ref SESToEmailAddress

  FromEmailVerfification:
    Type: AWS::SES::EmailIdentity
    Condition: IfFromEmailNotNull
    Properties: 
      EmailIdentity: !Ref SESFromEmailAddress
      
  LambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Description: 'Contains packages used in Penny Pincher Lambda'
    Properties:
      CompatibleRuntimes:
        - 'python3.8'
      Content:
        S3Bucket: !Ref CodeBucketName
        S3Key: 'pennypincher.zip'
      LayerName: 'Penny-Pincher-Lambda-Packages-Layer'

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Description: 'Generates Cost report with all the idle resources information and sends it to email or slack or both'
    Properties:
      #'Penny-Pincher-Docker-Lambda-4'
      FunctionName: !Join
      - "-"
      - - "Penny-Pincher-Docker-Lambda"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      Architectures:
        - x86_64
      Runtime: 'python3.8'
      Role: !GetAtt ServiceRoleForLambda.Arn
      Handler: 'main.cfnresponsefun'
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: 'pennypincher.zip'
      PackageType: 'Zip'
      Timeout: 900
      MemorySize: 1024
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          ACCOUNT_NAME: !Ref AccountName
          REPORTING_PLATFORM: !Ref ReportingPlatform
          CHANNEL_NAME: !Ref SlackChannelName
          FROM_ADDRESS: !Ref SESFromEmailAddress
          TO_ADDRESS: !Ref SESToEmailAddress
          SES_REGION: !Ref SESRegion
          REPORT_BUCKET: !If [ CreateReportBucket, !Ref ManagedReportBucket, !Ref ReportBucket ]
          WEBHOOK_URL: !Ref WebhookUrl

  TriggerPennyPincher:
    Type: Custom::TriggerPennyPincher
    DependsOn: LambdaFunction
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn

Outputs:
  BucketName:
    Description: S3 bucket name
    Value: !Ref ManagedReportBucket

      
           